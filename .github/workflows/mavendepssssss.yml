name: Maven Dependency Management

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'    # Runs daily at 3 AM UTC

jobs:
  dependency-management:
    runs-on: ubuntu-latest
    name: Manage Dependencies

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set Up JDK 11
      - name: Set Up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: maven

      # Step 3: Display Java and Maven Versions
      - name: Display Java Version
        run: java -version

      - name: Display Maven Version
        run: mvn -version

      # Step 4: Maven Clean Install with Logging
      - name: Maven Clean Install with Logging
        run: |
          mvn clean install -DskipTests > build.log 2>&1

      # Step 5: Check for Missing Dependencies in Logs
      - name: Check for Missing Dependencies
        run: |
          if grep -q "Could not resolve" build.log; then
            echo "Missing dependencies detected."
            exit 1
          fi

      # Step 6: Install Missing Dependencies (if included in repo)
      - name: Install Missing Dependencies
        if: failure()
        run: |
          for jar in libs/*.jar; do
            artifact=$(basename "$jar" .jar)
            mvn install:install-file \
              -DgroupId=com.example \
              -DartifactId="$artifact" \
              -Dversion=1.0.0 \
              -Dpackaging=jar \
              -Dfile="$jar" \
              -DpomFile="libs/$artifact.pom"
          done

      # Step 7: Re-run Maven Clean Install After Installing Dependencies
      - name: Re-run Maven Clean Install
        if: failure()
        run: mvn clean install -DskipTests

      # Step 8: Generate Dependency Tree
      - name: Generate Dependency Tree
        run: mvn dependency:tree -Dverbose -DoutputType=dot -DoutputFile=dependency-tree.dot

      # Step 9: Upload Dependency Tree Artifact
      - name: Upload Dependency Tree Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dependency-tree
          path: dependency-tree.dot

      # Step 10: Analyze Dependencies
      - name: Analyze Dependencies
        run: mvn dependency:analyze -Doutput=dependency-analysis.txt

      # Step 11: Upload Dependency Analysis Report
      - name: Upload Dependency Analysis
        uses: actions/upload-artifact@v3
        with:
          name: dependency-analysis
          path: dependency-analysis.txt

      # Step 12: Notify on Dependency Analysis Issues
      - name: Notify Dependency Issues
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.example.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Maven Dependency Issues Detected in aperture-spi'
          body: |
            The Maven dependency analysis for aperture-spi has detected issues. Please review the dependency-analysis.txt report.
          to: your-email@example.com
          from: github-actions@example.com

      # Step 13: Create GitHub Issue for Dependency Issues
      - name: Create GitHub Issue for Dependency Issues
        if: failure()
        uses: peter-evans/create-issue-from-file@v3
        with:
          title: 'Maven Dependency Issues Detected in aperture-spi'
          content-file: dependency-analysis.txt
          labels: dependency, issue
